/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AppImport } from './routes/_app'
import { Route as AppIndexImport } from './routes/_app.index'
import { Route as AppSettingsImport } from './routes/_app.settings'
import { Route as AppSearchImport } from './routes/_app.search'
import { Route as AppNotificationsImport } from './routes/_app.notifications'
import { Route as AppHashtagTagImport } from './routes/_app.hashtag.$tag'
import { Route as AppProfileUsernameRouteImport } from './routes/_app.profile.$username.route'
import { Route as AppProfileUsernameIndexImport } from './routes/_app.profile.$username.index'
import { Route as AppProfileUsernamePostPostIdImport } from './routes/_app.profile.$username.post.$postId'

// Create/Update Routes

const AppRoute = AppImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any)

const AppIndexRoute = AppIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)

const AppSettingsRoute = AppSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AppRoute,
} as any)

const AppSearchRoute = AppSearchImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => AppRoute,
} as any)

const AppNotificationsRoute = AppNotificationsImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => AppRoute,
} as any)

const AppHashtagTagRoute = AppHashtagTagImport.update({
  id: '/hashtag/$tag',
  path: '/hashtag/$tag',
  getParentRoute: () => AppRoute,
} as any)

const AppProfileUsernameRouteRoute = AppProfileUsernameRouteImport.update({
  id: '/profile/$username',
  path: '/profile/$username',
  getParentRoute: () => AppRoute,
} as any)

const AppProfileUsernameIndexRoute = AppProfileUsernameIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppProfileUsernameRouteRoute,
} as any)

const AppProfileUsernamePostPostIdRoute =
  AppProfileUsernamePostPostIdImport.update({
    id: '/post/$postId',
    path: '/post/$postId',
    getParentRoute: () => AppProfileUsernameRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/_app/notifications': {
      id: '/_app/notifications'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof AppNotificationsImport
      parentRoute: typeof AppImport
    }
    '/_app/search': {
      id: '/_app/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof AppSearchImport
      parentRoute: typeof AppImport
    }
    '/_app/settings': {
      id: '/_app/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AppSettingsImport
      parentRoute: typeof AppImport
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof AppImport
    }
    '/_app/profile/$username': {
      id: '/_app/profile/$username'
      path: '/profile/$username'
      fullPath: '/profile/$username'
      preLoaderRoute: typeof AppProfileUsernameRouteImport
      parentRoute: typeof AppImport
    }
    '/_app/hashtag/$tag': {
      id: '/_app/hashtag/$tag'
      path: '/hashtag/$tag'
      fullPath: '/hashtag/$tag'
      preLoaderRoute: typeof AppHashtagTagImport
      parentRoute: typeof AppImport
    }
    '/_app/profile/$username/': {
      id: '/_app/profile/$username/'
      path: '/'
      fullPath: '/profile/$username/'
      preLoaderRoute: typeof AppProfileUsernameIndexImport
      parentRoute: typeof AppProfileUsernameRouteImport
    }
    '/_app/profile/$username/post/$postId': {
      id: '/_app/profile/$username/post/$postId'
      path: '/post/$postId'
      fullPath: '/profile/$username/post/$postId'
      preLoaderRoute: typeof AppProfileUsernamePostPostIdImport
      parentRoute: typeof AppProfileUsernameRouteImport
    }
  }
}

// Create and export the route tree

interface AppProfileUsernameRouteRouteChildren {
  AppProfileUsernameIndexRoute: typeof AppProfileUsernameIndexRoute
  AppProfileUsernamePostPostIdRoute: typeof AppProfileUsernamePostPostIdRoute
}

const AppProfileUsernameRouteRouteChildren: AppProfileUsernameRouteRouteChildren =
  {
    AppProfileUsernameIndexRoute: AppProfileUsernameIndexRoute,
    AppProfileUsernamePostPostIdRoute: AppProfileUsernamePostPostIdRoute,
  }

const AppProfileUsernameRouteRouteWithChildren =
  AppProfileUsernameRouteRoute._addFileChildren(
    AppProfileUsernameRouteRouteChildren,
  )

interface AppRouteChildren {
  AppNotificationsRoute: typeof AppNotificationsRoute
  AppSearchRoute: typeof AppSearchRoute
  AppSettingsRoute: typeof AppSettingsRoute
  AppIndexRoute: typeof AppIndexRoute
  AppProfileUsernameRouteRoute: typeof AppProfileUsernameRouteRouteWithChildren
  AppHashtagTagRoute: typeof AppHashtagTagRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppNotificationsRoute: AppNotificationsRoute,
  AppSearchRoute: AppSearchRoute,
  AppSettingsRoute: AppSettingsRoute,
  AppIndexRoute: AppIndexRoute,
  AppProfileUsernameRouteRoute: AppProfileUsernameRouteRouteWithChildren,
  AppHashtagTagRoute: AppHashtagTagRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AppRouteWithChildren
  '/notifications': typeof AppNotificationsRoute
  '/search': typeof AppSearchRoute
  '/settings': typeof AppSettingsRoute
  '/': typeof AppIndexRoute
  '/profile/$username': typeof AppProfileUsernameRouteRouteWithChildren
  '/hashtag/$tag': typeof AppHashtagTagRoute
  '/profile/$username/': typeof AppProfileUsernameIndexRoute
  '/profile/$username/post/$postId': typeof AppProfileUsernamePostPostIdRoute
}

export interface FileRoutesByTo {
  '/notifications': typeof AppNotificationsRoute
  '/search': typeof AppSearchRoute
  '/settings': typeof AppSettingsRoute
  '/': typeof AppIndexRoute
  '/hashtag/$tag': typeof AppHashtagTagRoute
  '/profile/$username': typeof AppProfileUsernameIndexRoute
  '/profile/$username/post/$postId': typeof AppProfileUsernamePostPostIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_app': typeof AppRouteWithChildren
  '/_app/notifications': typeof AppNotificationsRoute
  '/_app/search': typeof AppSearchRoute
  '/_app/settings': typeof AppSettingsRoute
  '/_app/': typeof AppIndexRoute
  '/_app/profile/$username': typeof AppProfileUsernameRouteRouteWithChildren
  '/_app/hashtag/$tag': typeof AppHashtagTagRoute
  '/_app/profile/$username/': typeof AppProfileUsernameIndexRoute
  '/_app/profile/$username/post/$postId': typeof AppProfileUsernamePostPostIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/notifications'
    | '/search'
    | '/settings'
    | '/'
    | '/profile/$username'
    | '/hashtag/$tag'
    | '/profile/$username/'
    | '/profile/$username/post/$postId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/notifications'
    | '/search'
    | '/settings'
    | '/'
    | '/hashtag/$tag'
    | '/profile/$username'
    | '/profile/$username/post/$postId'
  id:
    | '__root__'
    | '/_app'
    | '/_app/notifications'
    | '/_app/search'
    | '/_app/settings'
    | '/_app/'
    | '/_app/profile/$username'
    | '/_app/hashtag/$tag'
    | '/_app/profile/$username/'
    | '/_app/profile/$username/post/$postId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_app"
      ]
    },
    "/_app": {
      "filePath": "_app.tsx",
      "children": [
        "/_app/notifications",
        "/_app/search",
        "/_app/settings",
        "/_app/",
        "/_app/profile/$username",
        "/_app/hashtag/$tag"
      ]
    },
    "/_app/notifications": {
      "filePath": "_app.notifications.tsx",
      "parent": "/_app"
    },
    "/_app/search": {
      "filePath": "_app.search.tsx",
      "parent": "/_app"
    },
    "/_app/settings": {
      "filePath": "_app.settings.tsx",
      "parent": "/_app"
    },
    "/_app/": {
      "filePath": "_app.index.tsx",
      "parent": "/_app"
    },
    "/_app/profile/$username": {
      "filePath": "_app.profile.$username.route.tsx",
      "parent": "/_app",
      "children": [
        "/_app/profile/$username/",
        "/_app/profile/$username/post/$postId"
      ]
    },
    "/_app/hashtag/$tag": {
      "filePath": "_app.hashtag.$tag.tsx",
      "parent": "/_app"
    },
    "/_app/profile/$username/": {
      "filePath": "_app.profile.$username.index.tsx",
      "parent": "/_app/profile/$username"
    },
    "/_app/profile/$username/post/$postId": {
      "filePath": "_app.profile.$username.post.$postId.tsx",
      "parent": "/_app/profile/$username"
    }
  }
}
ROUTE_MANIFEST_END */
