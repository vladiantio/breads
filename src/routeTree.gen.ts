/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsImport } from './routes/settings'
import { Route as SearchImport } from './routes/search'
import { Route as NotificationsImport } from './routes/notifications'
import { Route as IndexImport } from './routes/index'
import { Route as HashtagTagImport } from './routes/hashtag.$tag'
import { Route as ProfileUsernameRouteImport } from './routes/profile.$username.route'
import { Route as ProfileUsernameIndexImport } from './routes/profile.$username.index'
import { Route as ProfileUsernamePostPostIdImport } from './routes/profile.$username.post.$postId'

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const SearchRoute = SearchImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRoute,
} as any)

const NotificationsRoute = NotificationsImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const HashtagTagRoute = HashtagTagImport.update({
  id: '/hashtag/$tag',
  path: '/hashtag/$tag',
  getParentRoute: () => rootRoute,
} as any)

const ProfileUsernameRouteRoute = ProfileUsernameRouteImport.update({
  id: '/profile/$username',
  path: '/profile/$username',
  getParentRoute: () => rootRoute,
} as any)

const ProfileUsernameIndexRoute = ProfileUsernameIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProfileUsernameRouteRoute,
} as any)

const ProfileUsernamePostPostIdRoute = ProfileUsernamePostPostIdImport.update({
  id: '/post/$postId',
  path: '/post/$postId',
  getParentRoute: () => ProfileUsernameRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/notifications': {
      id: '/notifications'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof NotificationsImport
      parentRoute: typeof rootRoute
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/profile/$username': {
      id: '/profile/$username'
      path: '/profile/$username'
      fullPath: '/profile/$username'
      preLoaderRoute: typeof ProfileUsernameRouteImport
      parentRoute: typeof rootRoute
    }
    '/hashtag/$tag': {
      id: '/hashtag/$tag'
      path: '/hashtag/$tag'
      fullPath: '/hashtag/$tag'
      preLoaderRoute: typeof HashtagTagImport
      parentRoute: typeof rootRoute
    }
    '/profile/$username/': {
      id: '/profile/$username/'
      path: '/'
      fullPath: '/profile/$username/'
      preLoaderRoute: typeof ProfileUsernameIndexImport
      parentRoute: typeof ProfileUsernameRouteImport
    }
    '/profile/$username/post/$postId': {
      id: '/profile/$username/post/$postId'
      path: '/post/$postId'
      fullPath: '/profile/$username/post/$postId'
      preLoaderRoute: typeof ProfileUsernamePostPostIdImport
      parentRoute: typeof ProfileUsernameRouteImport
    }
  }
}

// Create and export the route tree

interface ProfileUsernameRouteRouteChildren {
  ProfileUsernameIndexRoute: typeof ProfileUsernameIndexRoute
  ProfileUsernamePostPostIdRoute: typeof ProfileUsernamePostPostIdRoute
}

const ProfileUsernameRouteRouteChildren: ProfileUsernameRouteRouteChildren = {
  ProfileUsernameIndexRoute: ProfileUsernameIndexRoute,
  ProfileUsernamePostPostIdRoute: ProfileUsernamePostPostIdRoute,
}

const ProfileUsernameRouteRouteWithChildren =
  ProfileUsernameRouteRoute._addFileChildren(ProfileUsernameRouteRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/notifications': typeof NotificationsRoute
  '/search': typeof SearchRoute
  '/settings': typeof SettingsRoute
  '/profile/$username': typeof ProfileUsernameRouteRouteWithChildren
  '/hashtag/$tag': typeof HashtagTagRoute
  '/profile/$username/': typeof ProfileUsernameIndexRoute
  '/profile/$username/post/$postId': typeof ProfileUsernamePostPostIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/notifications': typeof NotificationsRoute
  '/search': typeof SearchRoute
  '/settings': typeof SettingsRoute
  '/hashtag/$tag': typeof HashtagTagRoute
  '/profile/$username': typeof ProfileUsernameIndexRoute
  '/profile/$username/post/$postId': typeof ProfileUsernamePostPostIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/notifications': typeof NotificationsRoute
  '/search': typeof SearchRoute
  '/settings': typeof SettingsRoute
  '/profile/$username': typeof ProfileUsernameRouteRouteWithChildren
  '/hashtag/$tag': typeof HashtagTagRoute
  '/profile/$username/': typeof ProfileUsernameIndexRoute
  '/profile/$username/post/$postId': typeof ProfileUsernamePostPostIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/notifications'
    | '/search'
    | '/settings'
    | '/profile/$username'
    | '/hashtag/$tag'
    | '/profile/$username/'
    | '/profile/$username/post/$postId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/notifications'
    | '/search'
    | '/settings'
    | '/hashtag/$tag'
    | '/profile/$username'
    | '/profile/$username/post/$postId'
  id:
    | '__root__'
    | '/'
    | '/notifications'
    | '/search'
    | '/settings'
    | '/profile/$username'
    | '/hashtag/$tag'
    | '/profile/$username/'
    | '/profile/$username/post/$postId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  NotificationsRoute: typeof NotificationsRoute
  SearchRoute: typeof SearchRoute
  SettingsRoute: typeof SettingsRoute
  ProfileUsernameRouteRoute: typeof ProfileUsernameRouteRouteWithChildren
  HashtagTagRoute: typeof HashtagTagRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  NotificationsRoute: NotificationsRoute,
  SearchRoute: SearchRoute,
  SettingsRoute: SettingsRoute,
  ProfileUsernameRouteRoute: ProfileUsernameRouteRouteWithChildren,
  HashtagTagRoute: HashtagTagRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/notifications",
        "/search",
        "/settings",
        "/profile/$username",
        "/hashtag/$tag"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/notifications": {
      "filePath": "notifications.tsx"
    },
    "/search": {
      "filePath": "search.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/profile/$username": {
      "filePath": "profile.$username.route.tsx",
      "children": [
        "/profile/$username/",
        "/profile/$username/post/$postId"
      ]
    },
    "/hashtag/$tag": {
      "filePath": "hashtag.$tag.tsx"
    },
    "/profile/$username/": {
      "filePath": "profile.$username.index.tsx",
      "parent": "/profile/$username"
    },
    "/profile/$username/post/$postId": {
      "filePath": "profile.$username.post.$postId.tsx",
      "parent": "/profile/$username"
    }
  }
}
ROUTE_MANIFEST_END */
